parameters:
  - name: tofuDirectory
    type: string
  - name: planArguments
    type: string
    default: ""
  - name: addVaultAuthentication
    type: boolean
    default: false
  - name: addGithubToken
    type: boolean
    default: false
  - name: artifactName
    type: string
    default: "terraform-plan"
  - name: includeAzureDevopsVariables
    type: boolean
    default: false


stages:
  - stage: planTofu
    displayName: "Plan Tofu"
    jobs:
      - job: planTofu
        displayName: Tofu
        pool:
          name: Default
        steps:
          - pwsh: |
              tofu init
            displayName: "Initialize"
            workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.tofuDirectory }}
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_ENDPOINT_URL_S3: $(AWS_ENDPOINT_URL_S3)
              ${{ if eq(parameters.includeAzureDevopsVariables, true) }}:
                AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)
                AZDO_ORG_SERVICE_URL: $(AZDO_ORG_SERVICE_URL)
              ${{ else }}:
                ARM_CLIENT_ID: $(ARM_CLIENT_ID)
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                ARM_TENANT_ID: $(ARM_TENANT_ID)
              
          - pwsh: |

              $additionalArgs = "";
              $addVaultAuthentication = [bool]"${{ parameters.addVaultAuthentication }}"
              $addGithubToken = [bool]"${{ parameters.addGithubToken }}"
              if ($addVaultAuthentication) {
                $additionalArgs = "-var vault_approle_role_id=$(vault-app-role-id) -var vault_approle_secret_id=$(vault-app-role-secret-id)"  
              }

              if {
                $additionalArgs += " -var github_token=$GITHUB_TOKEN"
              }
              
              tofu plan ${{ parameters.planArguments }} "$additionalArgs" -out tf.plan -detailed-exitcode
              $exitCode = $LASTEXITCODE

              $changes = false;
              if ($exitCode -eq 2) {
                Write-Host "Changes detected"
                $changes = true;
                tofu show -json tf.plan > plan.json
                $plan = get-content -raw plan.json | convertfrom-json
                $hasDestructiveChanges = ($plan.resource_changes | ? { $_.change.actions -contains "delete" } | Measure).Count -gt 0
                
                if ($hasDestructiveChanges) {
                  "##vso[task.logissue type=warning]Changes with destroy detected, pipeline will require a manual approval to proceed"
                  Write-Host "##vso[task.setvariable variable=HAS_DESTROY_CHANGES;isOutput=true]true"
                }
                else {
                  echo "##vso[task.logissue type=warning]Changes with no destroys detected, it is safe for the pipeline to proceed automatically"
                  Write-Host "##vso[task.setvariable variable=HAS_CHANGES_ONLY;isOutput=true]true"
                }
              }
              elseif ($exitCode -eq 1) {
                Write-Host "Errors during terraform."
                exit 1
              }                          

              tofu show tf.plan -no-color > $(Build.ArtifactStagingDirectory)/terraform-plan.txt
              Copy-Item tf.plan $(Build.ArtifactStagingDirectory)/tf.plan
            displayName: "Plan"
            name: tofuPlan
            workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.tofuDirectory }}
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_ENDPOINT_URL_S3: $(AWS_ENDPOINT_URL_S3)
              ${{ if eq(parameters.includeAzureDevopsVariables, true) }}:
                AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)
                AZDO_ORG_SERVICE_URL: $(AZDO_ORG_SERVICE_URL)
              ${{ else }}:
                ARM_CLIENT_ID: $(ARM_CLIENT_ID)
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                ARM_TENANT_ID: $(ARM_TENANT_ID)

          - publish: $(Build.ArtifactStagingDirectory)
            artifact: ${{ parameters.artifactName}}
            displayName: "Publish Tofu Plan"      

  - stage: applyTofuAuto
    displayName: "Apply Tofu - Auto"
    dependsOn: planTofu
    condition: and
        (
          succeeded(),
          and (
            eq(dependencies.planTofu.outputs['planTofu.tofuPlan.HAS_CHANGES_ONLY'], 'true'),
            and(
              eq(variables['Build.SourceBranchName'], 'main'),
              ne(variables['Build.Reason'], 'PullRequest')
            )
          )
        )
    jobs:
      - job: applyTofu
        displayName: Apply Tofu
        pool:
          name: Default
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "${{ parameters.artifactName }}"
              targetPath: "$(Pipeline.Workspace)/${{ parameters.artifactName }}"
          - pwsh: |
              tofu init
            displayName: "Initialize"
            workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.tofuDirectory }}
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_ENDPOINT_URL_S3: $(AWS_ENDPOINT_URL_S3)
              ${{ if eq(parameters.includeAzureDevopsVariables, true) }}:
                AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)
                AZDO_ORG_SERVICE_URL: $(AZDO_ORG_SERVICE_URL)
              ${{ else }}:
                ARM_CLIENT_ID: $(ARM_CLIENT_ID)
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                ARM_TENANT_ID: $(ARM_TENANT_ID)
          - pwsh: |
              tofu apply -auto-approve $(Pipeline.Workspace)/${{ parameters.artifactName }}/tf.plan
            displayName: "Apply"
            workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.tofuDirectory }}
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_ENDPOINT_URL_S3: $(AWS_ENDPOINT_URL_S3)
              ${{ if eq(parameters.includeAzureDevopsVariables, true) }}:
                AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)
                AZDO_ORG_SERVICE_URL: $(AZDO_ORG_SERVICE_URL)
              ${{ else }}:
                ARM_CLIENT_ID: $(ARM_CLIENT_ID)
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                ARM_TENANT_ID: $(ARM_TENANT_ID)

  - stage: applyTofuManual
    displayName: "Apply Tofu - Manual"
    dependsOn: planTofu
    condition: and
        (
          succeeded(),
          and (
            eq(dependencies.planTofu.outputs['planTofu.tofuPlan.HAS_DESTROY_CHANGES'], 'true'),
            and(
              eq(variables['Build.SourceBranchName'], 'main'),
              ne(variables['Build.Reason'], 'PullRequest')
            )
          )
        )
    jobs:
      - job: "waitForValidation"
        displayName: "Wait > Wait for manual appoval"
        pool: "server"
        timeoutInMinutes: "4320" # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: "1440" # task times out in 1 day
            inputs:
              notifyUsers: ""
              instructions: "There are resources being destroyed or the costs are increasing alot as part of this deployment, please review the output of Terraform plan before approving."
              onTimeout: "reject"
      - job: applyTofu
        dependsOn: "waitForValidation"
        displayName: Apply Tofu
        pool:
          name: Default
        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: "current"
              artifactName: "${{ parameters.artifactName }}"
              targetPath: "$(Pipeline.Workspace)/${{ parameters.artifactName }}"
          - pwsh: |
              tofu init
            displayName: "Initialize"
            workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.tofuDirectory }}
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_ENDPOINT_URL_S3: $(AWS_ENDPOINT_URL_S3)
              ${{ if eq(parameters.includeAzureDevopsVariables, true) }}:
                AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)
                AZDO_ORG_SERVICE_URL: $(AZDO_ORG_SERVICE_URL)
              ${{ else }}:
                ARM_CLIENT_ID: $(ARM_CLIENT_ID)
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                ARM_TENANT_ID: $(ARM_TENANT_ID)
          - pwsh: |
              tofu apply -auto-approve $(Pipeline.Workspace)/${{ parameters.artifactName }}/tf.plan
            displayName: "Apply"
            workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.tofuDirectory }}
            env:
              AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
              AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
              AWS_ENDPOINT_URL_S3: $(AWS_ENDPOINT_URL_S3)
              ${{ if eq(parameters.includeAzureDevopsVariables, true) }}:
                AZDO_PERSONAL_ACCESS_TOKEN: $(AZDO_PERSONAL_ACCESS_TOKEN)
                AZDO_ORG_SERVICE_URL: $(AZDO_ORG_SERVICE_URL)
              ${{ else }}:
                ARM_CLIENT_ID: $(ARM_CLIENT_ID)
                ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
                ARM_TENANT_ID: $(ARM_TENANT_ID)
